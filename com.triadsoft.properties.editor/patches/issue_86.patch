### Eclipse Workspace Patch 1.0
#P com.triadsoft.properties.editor
Index: src/com/triadsoft/properties/model/utils/IWildcardPath.java
===================================================================
--- src/com/triadsoft/properties/model/utils/IWildcardPath.java	(revision 531)
+++ src/com/triadsoft/properties/model/utils/IWildcardPath.java	(working copy)
@@ -23,11 +23,14 @@
 	public static final String FILE_EXTENSION_WILDCARD = "{fileextension}";
 	public static final String COUNTRY_WILDCARD = "{country}";
 	public static final String LANGUAGE_WILDCARD = "{lang}";
-	
+	/** Regex for wildcards removal - issue 86*/
+	public static final String REMOVAL_REGEX = "[^\\}]?\\{[%1$s]*\\}";
+
+
 	/**
 	 * Es el numero de parametros opcionales que ser&aacute;n soportados.
 	 * 锟絪te numero sirve para poner un limite en la busqueda de las opciones,
-	 * y para validar el l锟絤ite de opciones cuando se ingresa un nuevo wildcard path. 
+	 * y para validar el l锟絤ite de opciones cuando se ingresa un nuevo wildcard path.
 	 */
 	public static final int MAXIMUM_OPTIONALS=5;
 
@@ -42,7 +45,7 @@
 	public String getLanguage();
 
 	public Locale getLocale();
-	
+
 	public String getRoot();
 
 	/**
@@ -64,7 +67,7 @@
 	/**
 	 * This method return true if the file path match with the wildcard path
 	 * loaded into the WildcardPath object
-	 * 
+	 *
 	 * @param filepath
 	 *            The file path string to compare
 	 * @return java.lang.Boolean
@@ -74,7 +77,7 @@
 	/**
 	 * This method return true if the file path match with the wildcard path
 	 * loaded into the WildcardPath object
-	 * 
+	 *
 	 * @param filepath
 	 *            The file path string to compare
 	 * @return java.lang.Boolean
@@ -83,9 +86,9 @@
 	 */
 //	public Boolean match(String filepath, boolean withLanguage,
 //			boolean withCountry);
-//	
+//
 	/**
-	 * This method will looking for matchs 
+	 * This method will looking for matchs
 	 * @param offset
 	 * @return
 	 */
@@ -93,7 +96,7 @@
 
 	/**
 	 * Permite reemplazar el locale en el wildcard path
-	 * 
+	 *
 	 * @param locale
 	 * @return
 	 */
@@ -101,7 +104,7 @@
 
 	/**
 	 * Permite reemplazar el wildcard pasado por el valor
-	 * 
+	 *
 	 * @param wildcard
 	 * @param value
 	 * @param replace
@@ -111,7 +114,7 @@
 
 	/**
 	 * Permite reemplazar el wildcard pasado por el valor
-	 * 
+	 *
 	 * @param wildcard
 	 * @param value
 	 * @param replace
@@ -121,7 +124,7 @@
 
 	/**
 	 * Devuelve el path hasta previo al descubrimiento del ROOT
-	 * 
+	 *
 	 * @return
 	 */
 	public String getPathToRoot();
@@ -143,6 +146,6 @@
 	public void setFileName(String fileName);
 
 	public void setRoot(String root);
-	
+
 	public Object clone() throws CloneNotSupportedException;
 }
\ No newline at end of file
Index: src/com/triadsoft/properties/model/utils/WildCardPath2.java
===================================================================
--- src/com/triadsoft/properties/model/utils/WildCardPath2.java	(revision 531)
+++ src/com/triadsoft/properties/model/utils/WildCardPath2.java	(working copy)
@@ -9,12 +9,14 @@
 
 import org.eclipse.core.resources.IFile;
 
+import com.triadsoft.properties.wizards.LocalizedPropertiesPage;
+
 /**
  * Esta clase es la encargada de encapsular todos la logica para poder parsear y
  * descubrir los datos referidos al path La clase no maneja archivos sino que
  * solamente manipula strings y obtiene los datos que ser锟絥 utilizados por el
  * controlador de archivos
- * 
+ *
  * @author Triad (flores.leonardo@gmail.com)
  */
 public class WildCardPath2 implements IWildcardPath {
@@ -112,7 +114,7 @@
 	/**
 	 * Obtiene los wildacards usados en la expresion regular usando el offset
 	 * para eliminar los opcionales
-	 * 
+	 *
 	 * @param offset
 	 * @return
 	 */
@@ -318,6 +320,64 @@
 		return getPath(0);
 	}
 
+	/**
+	 * Gets path for the {@link LocalizedPropertiesPage}. If some
+	 * wildcards do not exist in the path, they will be removed ALONG with
+	 * the character, that PRECEEDS it.
+	 * @return Modified path for a file created by the wizard.
+     */
+    public String getWizardPath() {
+            String path = this.getExcludedOptional(0);
+
+            //FIXME there is a problem commented in the issue 84, but it's Windows related.
+
+            if (root != null && !("".equals(root))) {
+                    path = path.replace(ROOT_WILDCARD, root);
+            }
+            else {
+                    path = removeWildcard(ROOT_WILDCARD, path);
+            }
+            if (fileName != null && !("".equals(fileName))) {
+                    path = path.replace(FILENAME_WILDCARD, fileName);
+            }
+            else {
+                    path = removeWildcard(FILENAME_WILDCARD, path);
+            }
+            if (fileExtension != null && !("".equals(fileExtension))) {
+                    path = path.replace(FILE_EXTENSION_WILDCARD, fileExtension);
+            }
+            else {
+                    path = removeWildcard(FILE_EXTENSION_WILDCARD, path);
+            }
+            if (language != null && !("".equals(language))) {
+                    path = path.replace(LANGUAGE_WILDCARD, language);
+            }
+            else {
+                    path = removeWildcard(LANGUAGE_WILDCARD, path);
+            }
+            if (country != null && !("".equals(country))) {
+                    path = path.replace(COUNTRY_WILDCARD, country);
+            }
+            else {
+                    path = removeWildcard(COUNTRY_WILDCARD, path);
+            }
+
+            return path;
+    }
+
+    /**
+     * Removes wildcard occurances from path
+     * @param wildcard A wildcard, which will be removed from path.
+     * @param path A path in which wildcard occurances will be searched.
+     * @return Modified path without wildcard.
+     */
+    private String removeWildcard(String wildcard, String path) {
+            Pattern pattern = Pattern.compile(String.format(IWildcardPath.REMOVAL_REGEX, wildcard));
+            Matcher matcher = pattern.matcher(path);
+            return matcher.replaceAll("");
+    }
+
+
 	public String getPath(int offset) {
 		String path = this.getExcludedOptional(offset);
 		path = path.replace(ROOT_WILDCARD, root == null ? TEXT_REGEX : root);
Index: src/com/triadsoft/properties/wizards/LocalizedPropertiesPage.java
===================================================================
--- src/com/triadsoft/properties/wizards/LocalizedPropertiesPage.java	(revision 531)
+++ src/com/triadsoft/properties/wizards/LocalizedPropertiesPage.java	(working copy)
@@ -35,7 +35,7 @@
 
 /**
  * Permite crear un archivo de propiedades localizado por el idioma
- * 
+ *
  * @author Triad (flores.leonardo@gmail.com)
  */
 
@@ -111,7 +111,7 @@
 
 	/**
 	 * Constructor for SampleNewWizardPage.
-	 * 
+	 *
 	 * @param pageName
 	 */
 	public LocalizedPropertiesPage(ISelection selection) {
@@ -376,7 +376,7 @@
 			return;
 		}
 		WildCardPath2 wp = new WildCardPath2(selected[0]);
-		filepathText.setText(wp.getPath());
+		filepathText.setText(wp.getWizardPath());
 	}
 
 	/**
#P com.triadsoft.properties.editor.test
Index: src/com/triadsoft/properties/editor/utils/WildcardPath2Test.java
===================================================================
--- src/com/triadsoft/properties/editor/utils/WildcardPath2Test.java	(revision 531)
+++ src/com/triadsoft/properties/editor/utils/WildcardPath2Test.java	(working copy)
@@ -6,11 +6,11 @@
 	public void setUp()throws Exception{
 		super.setUp();
 	}
-	
+
 	public void tearDown()throws Exception{
 		super.tearDown();
 	}
-	
+
 	public void testGetFullPath() {
 		WildCardPath2 wp = new WildCardPath2(JAVA_PROPERTIES);
 		wp.setCountry("AR");
@@ -32,4 +32,18 @@
 		String lll = wp.getPath();
 		assertTrue("El path deber锟絘 ser", "/src/core_components.es_[A-Z]{2}.properties".equals(lll));
 	}
+
+	/**
+	 * Ommits the country wildcard to test optional separators removing (issue 86)
+	 */
+	public void testGetWizardPath() {
+		WildCardPath2 wp = new WildCardPath2(JAVA_PROPERTIES);
+		wp.setFileExtension("properties");
+		wp.setFileName("core_components");
+		wp.setRoot("src");
+		wp.setLanguage("es");
+		String result = wp.getWizardPath();
+		assertTrue("Optional separator character has been removed", "/src/core_components.es.properties".equals(result));
+	}
+
 }
